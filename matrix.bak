#include "matrix.h"
#include "quantum.h"

// Define the number of rows and columns
#undef MATRIX_ROWS
#define MATRIX_ROWS 5

// Matrix state
static matrix_row_t matrix[MATRIX_ROWS];
static matrix_row_t matrix_debouncing[MATRIX_ROWS];

#define DEBOUNCE 5
static uint8_t debouncing = DEBOUNCE;

// Pin definitions
static const uint8_t row_pins[MATRIX_ROWS] = {GP5, GP6, GP7, GP8, GP9};
static const uint8_t col_pins[MATRIX_COLS] = {GP27, GP26, GP22, GP20, GP23, GP21};

void matrix_init(void) {
    // Initialize row pins as input with pull-up
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        setPinInputHigh(row_pins[row]);
    }

    // Initialize column pins as output and set to low
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
        setPinOutput(col_pins[col]);
        writePinLow(col_pins[col]);
    }

    // Clear the matrix
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t matrix_scan(void) {
    uint8_t changed = 0;

    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
        // Activate the current column
        writePinHigh(col_pins[col]);

        // Read each row
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
            bool key_state = !readPin(row_pins[row]); // Active low
            if (key_state != (matrix_debouncing[row] & (1 << col))) {
                matrix_debouncing[row] ^= (1 << col);
                debouncing = DEBOUNCE;
            }
        }

        // Deactivate the column
        writePinLow(col_pins[col]);
    }

    if (debouncing) {
        if (--debouncing == 0) {
            for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
                if (matrix[row] != matrix_debouncing[row]) {
                    matrix[row] = matrix_debouncing[row];
                    changed = 1;
                }
            }
        }
    }

    return changed;
}

matrix_row_t matrix_get_row(uint8_t row) {
    return matrix[row];
}
